<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="egovframework.tst.service.TstMapper">
	
	<select id="selectCrtfList" parameterType="int" resultType="egovMap">
  		SELECT test_cate_seq,
				name
		FROM TEST_CATE_TB
		WHERE use_yn = 1
		AND ifnull(top_depth_seq,0) = #{topCode}
	</select>

	<select id="selectStndrList" parameterType="tstParam" resultType="egovMap">
		select test_stndr_seq, test_stndr
		from TEST_STNDR_TB
		where use_yn = 1
		and country_code = #{countryCode}
		and crtf_type_seq = #{crtfTypeSeq}
		and test_type_code = #{testTypeCode}
	</select>

	<select id="selectDetail" parameterType="testReq" resultType="testRes">
		select test_seq
		from TEST_ITEM_TB
			inner join TEST_TB
		    on TEST_ITEM_TB.test_item_seq = TEST_TB.test_item_seq
		where TEST_ITEM_TB.test_item_seq = #{testItemSeq}
	</select>

	<insert id="insert" parameterType="testReq">
    <selectKey resultType="int" keyProperty="testNo" order="BEFORE">
        SELECT ifnull(MAX(TEST_NO)+1,1) testNo FROM TEST_TB where TEST_TYPE_CODE = #{testTypeCode}
    </selectKey> 
		INSERT INTO TEST_TB
		(
			TEST_NO,
			TEST_TYPE_CODE,
			TEST_ITEM_SEQ,
			INS_MEM_ID,
			UDT_MEM_ID
		)
		VALUES
		(
			#{testNo},
			#{testTypeCode},
			#{testItemSeq},
        	#{insMemId},
			#{udtMemId}
		)
	</insert>
	
	<select id="selectListCnt" parameterType="testReq" resultType="int">
		SELECT 
			count(TEST_TB.test_seq)
		from TEST_ITEM_TB
		
			inner join TEST_TB
		    on TEST_ITEM_TB.test_item_seq = TEST_TB.test_item_seq
		    
		    inner join JOB_TB
		    on JOB_TB.quo_ym = TEST_ITEM_TB.quo_ym
		    and JOB_TB.quo_seq = TEST_ITEM_TB.quo_seq
		    
		    inner join SBK_TB
		    on JOB_TB.sbk_ym = SBK_TB.sbk_ym
		    and JOB_TB.sbk_seq = SBK_TB.sbk_seq
		    
			inner join TEST_STNDR_TB
			on TEST_ITEM_TB.TEST_STNDR_SEQ = TEST_STNDR_TB.TEST_STNDR_SEQ
		            
		    inner join TEST_CATE_TB A
			on TEST_STNDR_TB.CRTF_TYPE_SEQ = A.test_cate_seq
			
			inner join TEST_CATE_TB B
			on A.TOP_DEPTH_SEQ = B.test_cate_seq	
		            
		where 1=1
		and TEST_ITEM_TB.state != 'D'
		<if test="startDate != null and endDate != null">
        	and date_format(TEST_TB.ins_dt, '%Y%m%d') between date_format(#{startDate}, '%Y%m%d') and date_format(#{endDate}, '%Y%m%d')
        </if>
        
	</select>
		
	<select id="selectList" parameterType="testReq" resultType="egovMap">
		select
			ROW_NUMBER() OVER(ORDER BY TEST_TB.ins_dt) AS no,
		    TEST_TB.TEST_SEQ,
		    FN_GET_SEQSTRING('SB',JOB_TB.sbk_ym,'G',JOB_TB.sbk_seq) sbkId,
		    date_format(TEST_TB.ins_dt, '%Y-%m-%d') insDtStr,
		    concat(FN_GET_SEQSTRING('SB',JOB_TB.sbk_ym,'G',JOB_TB.sbk_seq),'-',TEST_TB.test_type_code,LPAD(TEST_TB.TEST_SEQ,4,0)) testId,
		    IFNULL(FN_CODE_NAME(TEST_STATE_TB.STATE_CODE,'TS'), '-') test_state,
		    IFNULL(TEST_STATE_TB.STATE_CODE, '') STATE_CODE,
		    IFNULL(date_format(SBK_TB.est_cmp_dt, '%Y-%m-%d'), '-') estCmpDt,
		    '미반입' imPoint,
		    '0' imSeq,
		    TEST_ITEM_TB.product,
			CONCAT_WS(',', IF(SG_NEW_YN=1,'신규',null),IF(SG_GB_YN=1,'기술기준 변경',null),IF(SG_DG_YN=1,'동일기자재',null),IF(SG_ETC_YN=1,'기술기준외 변경',null)) sgText,
			B.name crtfc1Name,
		    A.name crtfc2Name,
		    fn_code_name(TEST_STNDR_TB.TEST_TYPE_CODE,'TT') TEST_TYPE,
		    TEST_STNDR_TB.TEST_STNDR,
		    TEST_ITEM_TB.model,
		    ifnull(FN_MEM_NAME(TEST_ITEM_TB.rev_id), '-') RevName,
			ifnull(FN_MEM_NAME(TEST_MNGR_TB.TEST_MNG_ID), '미배정') TestMngName,
			ifnull(FN_POS_NAME(TEST_MNGR_TB.TEST_MNG_ID), '') TestMngPos,
			ifnull(TEST_MNGR_TB.TEST_MNG_ID, '') TEST_MNG_ID,
		    FN_MEM_NAME(SBK_TB.ins_mem_id) memName,
		    '-' rawState
		    
		from TEST_ITEM_TB
		
			inner join TEST_TB
		    on TEST_ITEM_TB.test_item_seq = TEST_TB.test_item_seq
		    
		    inner join JOB_TB
		    on JOB_TB.quo_ym = TEST_ITEM_TB.quo_ym
		    and JOB_TB.quo_seq = TEST_ITEM_TB.quo_seq
		    
		    inner join SBK_TB
		    on JOB_TB.sbk_ym = SBK_TB.sbk_ym
		    and JOB_TB.sbk_seq = SBK_TB.sbk_seq
		    
			inner join TEST_STNDR_TB
			on TEST_ITEM_TB.TEST_STNDR_SEQ = TEST_STNDR_TB.TEST_STNDR_SEQ
		            
		    inner join TEST_CATE_TB A
			on TEST_STNDR_TB.CRTF_TYPE_SEQ = A.test_cate_seq
			
			inner join TEST_CATE_TB B
			on A.TOP_DEPTH_SEQ = B.test_cate_seq	
			
		    left join TEST_STATE_TB
            on TEST_STATE_TB.TEST_STATE_SEQ = (
								select TEST_STATE_SEQ
                                from TEST_STATE_TB sub
                                where sub.TEST_SEQ = TEST_TB.TEST_SEQ
                                order by TEST_STATE_SEQ desc
                                limit 1
            )
            
		    left join TEST_MNGR_TB
            on TEST_MNGR_TB.TEST_MNGR_SEQ = (
								select TEST_MNGR_SEQ
                                from TEST_MNGR_TB sub
                                where sub.TEST_SEQ = TEST_TB.TEST_SEQ
                                order by TEST_MNGR_SEQ desc
                                limit 1
            )
            
		where 1=1
		and TEST_ITEM_TB.state != 'D'
		<if test="startDate != null and endDate != null">
        	and date_format(TEST_TB.ins_dt, '%Y%m%d') between date_format(#{startDate}, '%Y%m%d') and date_format(#{endDate}, '%Y%m%d')
        </if>
        order by no desc
        LIMIT #{pageUnit} OFFSET #{firstIndex};
        
	</select>
	
	<select id="testMemList" parameterType="String" resultType="egovMap">
		select
			date_format(TEST_MNGR_TB.ins_dt, '%Y-%m-%d') instDtStr,
			MEMBER_TB.MEM_NAME memName,
			fn_dept_name(TEST_MNGR_TB.INS_MEM_ID) insPos,
		    ins.MEM_NAME insName,
		    memo
		    
		from TEST_MNGR_TB
		
			inner join MEMBER_TB
			on TEST_MNGR_TB.TEST_MNG_ID = MEMBER_TB.id
			
			inner join MEMBER_TB ins
			on TEST_MNGR_TB.INS_MEM_ID = ins.id
		
		where 1=1
		and TEST_MNGR_TB.TEST_SEQ = #{testSeq}
		order by TEST_MNGR_SEQ desc
	</select>
	
	<insert id="testMemInsert" parameterType="testReq" >
		INSERT INTO TEST_MNGR_TB
		(
			TEST_SEQ,
			TEST_MNG_ID,
			MEMO,
			INS_MEM_ID,
			UDT_MEM_ID
		)
		VALUES
		(
			#{testSeq},
			#{testMngId},
			#{memo},
			#{insMemId},
			#{udtMemId}
		);
	</insert>
	
	<select id="testStateList" parameterType="String" resultType="egovMap">
		select
			date_format(TEST_STATE_TB.ins_dt, '%Y-%m-%d') instDtStr,
			ifnull(fn_code_name(TEST_STATE_TB.STATE_CODE ,'TS'), '-') state,
			fn_dept_name(TEST_STATE_TB.INS_MEM_ID) insPos,
		    ins.MEM_NAME insName,
		    memo
		    
		from TEST_STATE_TB
			
			inner join MEMBER_TB ins
			on TEST_STATE_TB.INS_MEM_ID = ins.id
		
		where 1=1
		and TEST_STATE_TB.TEST_SEQ = #{testSeq}
		order by TEST_STATE_SEQ desc
	</select>
	
	<insert id="testStateInsert" parameterType="testReq" >
		INSERT INTO TEST_STATE_TB
		(
			TEST_SEQ,
			STATE_CODE,
			MEMO,
			INS_MEM_ID,
			UDT_MEM_ID
		)
		VALUES
		(
			#{testSeq},
			#{stateCode},
			#{memo},
			#{insMemId},
			#{udtMemId}
		);
	</insert>

	<select id="testBoardList" parameterType="String" resultType="egovMap">
		select
			date_format(TEST_MEMO_TB.ins_dt, '%Y-%m-%d %T') instDtStr,
			fn_dept_name(TEST_MEMO_TB.INS_MEM_ID) insPos,
		    ins.MEM_NAME insName,
		    memo
		    
		from TEST_MEMO_TB
			
			inner join MEMBER_TB ins
			on TEST_MEMO_TB.INS_MEM_ID = ins.id
		
		where 1=1
		and TEST_MEMO_TB.TEST_SEQ = #{testSeq}
		order by TEST_MEMO_SEQ desc
	</select>
	
	<insert id="testBoardInsert" parameterType="testReq" >
		INSERT INTO TEST_MEMO_TB
		(
			TEST_SEQ,
			MEMO,
			INS_MEM_ID,
			UDT_MEM_ID
		)
		VALUES
		(
			#{testSeq},
			#{memo},
			#{insMemId},
			#{udtMemId}
		);
	</insert>
	
	<select id="testBoardAppDetail" parameterType="String" resultType="sbkRes">
		SELECT
		
			FN_GET_SEQSTRING('SB',SBK_TB.SBK_YM,SBK_TB.type,SBK_TB.SBK_SEQ) sbkId ,
			
			/* 신청기기 */
			JOB_TB.prdct_name,
			JOB_TB.model_name,
			EXTEND_MODEL,
			CMPNY_IDNTF,
			ATHNT_NMBR,
			NEW_CMPNY_IDNTF1,
			NEW_CMPNY_IDNTF2,
			NEW_CMPNY_IDNTF3,
			ELCTR_RTNG_V,
			ELCTR_RTNG_Hz,
			ELCTR_RTNG_A,
			ELCTR_RTNG_W,
			CLOCK_FRQNC,
			MDL_IDNTF,
			ADD_DEV
		
		FROM SBK_TB	
			
			inner join JOB_TB
		    on SBK_TB.sbk_ym = JOB_TB.sbk_ym
		    and SBK_TB.sbk_seq = JOB_TB.sbk_seq
	    
		where 1=1
		and SBK_TB.sbk_ym = substring(#{sbkId},3,2)
		and SBK_TB.sbk_seq = substring(#{sbkId},7,4)
	</select>
	
</mapper>