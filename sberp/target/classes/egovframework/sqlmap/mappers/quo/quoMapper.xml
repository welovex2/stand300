<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="egovframework.quo.service.QuoMapper">

	<select id="selectListCnt" parameterType="comParam" resultType="int">
		SELECT 
			count(QUO_TB.quo_seq)
		FROM QUO_TB
			
		    INNER JOIN JOB_TB
		    ON QUO_TB.QUO_YM = JOB_TB.QUO_YM
		    AND QUO_TB.quo_seq = JOB_TB.QUO_SEQ
		    AND JOB_TB.state != 'D'
		    
		    LEFT JOIN (
				SELECT QUO_YM, QUO_SEQ, sum(CHRGS) CHRGS, sum(NET_SALES) NET_SALES
				FROM TEST_ITEM_TB
		        where state != 'D'
		        group by QUO_YM, QUO_SEQ
		    ) items
		    ON QUO_TB.QUO_YM = items.QUO_YM
		    AND QUO_TB.quo_seq = items.QUO_SEQ
		        
		    LEFT JOIN SLS_TB
		    ON QUO_TB.QUO_YM = SLS_TB.QUO_YM
		    AND QUO_TB.quo_seq = SLS_TB.QUO_SEQ
		    AND SLS_TB.state != 'D'
		    
		    LEFT JOIN CMPY_TB
			ON JOB_TB.CMPY_SEQ = CMPY_TB.CMPY_SEQ
    
		where 1=1
		<if test="startDate != null and endDate != null">
        	and date_format(QUO_TB.ins_dt, '%Y%m%d') between date_format(#{startDate}, '%Y%m%d') and date_format(#{endDate}, '%Y%m%d')
        </if>
	</select>
	
	<select id="selectList" parameterType="comParam" resultType="egovMap">
		SELECT 
		
			ROW_NUMBER() OVER(ORDER BY QUO_TB.ins_dt) AS no,
			if(chq_seq=0,'-',chq_seq) chqId,
		    FN_GET_SEQSTRING('Q',QUO_TB.quo_ym,type,QUO_TB.quo_seq) quoId, 
			FN_MEM_NAME(QUO_TB.ins_mem_id) memName,
		    date_format(QUO_TB.INS_DT, '%Y-%m-%d') insDtStr,
		    IFNULL(date_format(SLS_TB.CNFRM_DT, '%Y-%m-%d'),'') cnfrmDtStr,
		    IFNULL(FN_MEM_NAME(SLS_TB.CNFRM_ID),'') cnfrmName,
		    JOB_TB.CMPY_SEQ, 
		    IFNULL(FN_CODE_NAME(CMPY_TB.CMPY_CODE,'PT'), '미등록') cmpy_type,
		    IFNULL(CMPY_TB.CMPY_NAME, '') cmpyTitle,
		    IFNULL(JOB_TB.CMPY_NAME, '') cmpyName,
		    JOB_TB.PRDCT_NAME,
		    IFNULL(items.CHRGS, 0) CHRGS,
		    IFNULL(items.NET_SALES, 0) NET_SALES,
		    IFNULL(JOB_TB.CNS_SEQ, '') CNS_SEQ,
		    IFNULL(FN_LAST_CNS_MENO(JOB_TB.CNS_SEQ), '') lastMemo,
			IFNULL(FN_GET_SEQSTRING('SB',JOB_TB.sbk_ym,type,JOB_TB.sbk_seq), '') sbkId
		    
		FROM QUO_TB
			
		    INNER JOIN JOB_TB
		    ON QUO_TB.QUO_YM = JOB_TB.QUO_YM
		    AND QUO_TB.quo_seq = JOB_TB.QUO_SEQ
		    AND JOB_TB.state != 'D'
		    
		    LEFT JOIN (
				SELECT QUO_YM, QUO_SEQ, sum(CHRGS) CHRGS, sum(NET_SALES) NET_SALES
				FROM TEST_ITEM_TB
		        where state != 'D'
		        group by QUO_YM, QUO_SEQ
		    ) items
		    ON QUO_TB.QUO_YM = items.QUO_YM
		    AND QUO_TB.quo_seq = items.QUO_SEQ
		        
		    LEFT JOIN SLS_TB
		    ON QUO_TB.QUO_YM = SLS_TB.QUO_YM
		    AND QUO_TB.quo_seq = SLS_TB.QUO_SEQ
		    AND SLS_TB.state != 'D'
		    
		    LEFT JOIN CMPY_TB
			ON JOB_TB.CMPY_SEQ = CMPY_TB.CMPY_SEQ
    
		where 1=1
		<if test="startDate != null and endDate != null">
        	and date_format(QUO_TB.ins_dt, '%Y%m%d') between date_format(#{startDate}, '%Y%m%d') and date_format(#{endDate}, '%Y%m%d')
        </if>
        order by no desc
		LIMIT #{pageUnit} OFFSET #{firstIndex};
	</select>
	
	<select id="selectRef" parameterType="quoReq" resultType="String">
  		SELECT FN_GET_SEQSTRING('Q',ifnull(#{quoYm},date_format(now(), '%y%m')),'G',#{quoSeq}) FROM DUAL
	</select>
	
	<insert id="insert" parameterType="quoReq">
	    <selectKey keyProperty="quoSeq" resultType="int" order="BEFORE">
	        SELECT ifnull(max(QUO_SEQ),0)+1 FROM QUO_TB WHERE substring(QUO_YM,1,2) = date_format(now(), '%y')
	    </selectKey>
			INSERT INTO QUO_TB
			(
				QUO_YM,
				QUO_SEQ,
				CHQ_SEQ,
				ISSUE_DT,
				TRGT_CRTFC,
				PRD_INF,
				POWER_SUPLY_YN,
				WGHT_YN,
				MEMO,
				VAT_YN,
				NEED_WEEK,
				SPCL_CNDTN,
				SGN_URL,
				QUO_STATE_CODE,
				VERSION,
				<if test="estCmpDt != null and estCmpDt != ''">
				EST_CMP_DT,
				</if>
				COST_TOTAL,
				TOTAL_VAT,
				INS_MEM_ID,
				UDT_MEM_ID
			)
			VALUES
			(
				date_format(now(), '%y%m'),
				#{quoSeq},
				#{chqSeq},
				#{issueDt},
				#{trgtCrtfc},
				#{prdInf},
				#{powerSuplyYn},
				#{wghtYn},
				#{memo},
				#{vatYn},
				#{needWeek},
				#{spclCndtn},
				#{sgnUrl},
				#{quoStateCode},
				#{version},
				<if test="estCmpDt != null and estCmpDt != ''">
				#{estCmpDt},
				</if>
	    <![CDATA[
				#{CostTotal},
				#{TotalVat},
				#{insMemId},
				#{udtMemId}
			);
		]]>
	</insert>
	
	<update id="update" parameterType="quoReq">
		UPDATE QUO_TB
		SET

			ISSUE_DT = #{issueDt},
			TRGT_CRTFC = #{trgtCrtfc},
			PRD_INF = #{prdInf},
			POWER_SUPLY_YN = #{powerSuplyYn},
			WGHT_YN = #{wghtYn},
			MEMO = #{memo},
			VAT_YN = #{vatYn},
			NEED_WEEK = #{needWeek},
			SPCL_CNDTN = #{spclCndtn},
			<if test="sgnUrl != null and sgnUrl != ''">
			SGN_URL = #{sgnUrl},
			</if>
			VERSION = #{version},
			<if test="estCmpDt != null and estCmpDt != ''">
			EST_CMP_DT = #{estCmpDt},
			</if>
			COST_TOTAL = #{CostTotal},
			TOTAL_VAT = #{TotalVat},
			UDT_MEM_ID = #{udtMemId}
				
		WHERE QUO_TB.quo_ym = substring(#{quoId},2,4)
		AND QUO_TB.quo_seq = substring(#{quoId},8,4)
	</update>
		
	<insert id="insertTestItem">
		INSERT INTO TEST_ITEM_TB
		(
			QUO_YM,
			QUO_SEQ,
			TEST_STNDR_SEQ,
			PRODUCT,
			MODEL,
			MEMO,
			FEE,
			LCNS_TAX,
			TEST_FEE,
			CHRGS,
			ADVNC_PYMNT,
			SPCL_DSCNT,
			CNSLT_FEE,
			OTSRC_FEE,
			NET_SALES,
			INS_MEM_ID,
			UDT_MEM_ID
		)
		VALUES
		<foreach collection="testItems" item="item" separator=",">
			<if test="item.testItemSeq == 0">
		(
	<![CDATA[
			substring(#{quoId},2,4),
			substring(#{quoId},8,4),
			#{item.testStndrSeq},
			#{item.product},
			#{item.model},
			#{item.memo},
			#{item.fee},
			#{item.lcnsTax},
			#{item.testFee},
			#{item.chrgs},
			#{item.advncPymnt},
			#{item.spclDscnt},
			#{item.cnsltFee},
			#{item.otsrcFee},
			#{item.netSales},
			#{memId},
			#{memId}
		)
	]]>
			</if>
		</foreach>

	</insert>

	<update id="updateTestItem">
		<foreach collection="testItems" item="item" separator=";">
			<if test="item.testItemSeq > 0">
			UPDATE TEST_ITEM_TB
			SET
		<![CDATA[
				TEST_STNDR_SEQ = #{item.testStndrSeq},
				product = #{item.product},
				MODEL = #{item.model},
				MEMO = #{item.memo},
				FEE = #{item.fee},
				LCNS_TAX = #{item.lcnsTax},
				TEST_FEE = #{item.testFee},
				CHRGS = #{item.chrgs},
				ADVNC_PYMNT = #{item.advncPymnt},
				SPCL_DSCNT = #{item.spclDscnt},
				CNSLT_FEE = #{item.cnsltFee},
				OTSRC_FEE = #{item.otsrcFee},
				NET_SALES = #{item.netSales},
				STATE = #{item.state},
				UDT_MEM_ID = #{memId}
			WHERE TEST_ITEM_SEQ = #{item.testItemSeq}
			AND TEST_ITEM_TB.quo_ym = substring(#{quoId},2,4)
			AND TEST_ITEM_TB.quo_seq = substring(#{quoId},8,4)
		]]>
				</if>
			</foreach>
	</update>
	
	<update id="deleteTestItem">
		<foreach collection="testItems" item="item" separator=";">
			<if test="item.testItemSeq > 0">
			UPDATE TEST_ITEM_TB
			SET
		<![CDATA[
				STATE = #{item.state},
				UDT_MEM_ID = #{memId}
			WHERE TEST_ITEM_SEQ = #{item.testItemSeq}
			AND TEST_ITEM_TB.quo_ym = substring(#{quoId},2,4)
			AND TEST_ITEM_TB.quo_seq = substring(#{quoId},8,4)
		]]>
				</if>
			</foreach>
	</update>
		
	<insert id="insertJob" parameterType="quoReq" >
			INSERT INTO JOB_TB
			(QUO_YM,
			QUO_SEQ,
			CMPY_SEQ,
			CMPY_NAME,
			CMPY_PHONE,
			CMPY_FAX,
			MNG_NAME,
			PRDCT_NAME,
			MODEL_NAME,
			INS_MEM_ID,
			UDT_MEM_ID
			)
			VALUES
			(
			substring(#{quoId},2,4),
			substring(#{quoId},8,4),
			#{cmpySeq},
		<![CDATA[
			#{cmpyName},
			replace(#{cmpyPhone},'-',''),
			replace(#{cmpyFax},'-',''),
			#{mngName},
			(select ifnull(nullif(group_concat(DISTINCT  product), ''), #{prdctName}) 
			from TEST_ITEM_TB where quo_ym = substring(#{quoId},2,4) and quo_seq = substring(#{quoId},8,4) and state != 'D'),
			(select ifnull(nullif(group_concat(DISTINCT  model), ''), #{modelName})
			from TEST_ITEM_TB where quo_ym = substring(#{quoId},2,4) and quo_seq = substring(#{quoId},8,4) and state != 'D'),
			#{insMemId},
			#{udtMemId}
			)
		]]>
	</insert>
		
	<update id="updateJob" parameterType="quoReq" >
			UPDATE JOB_TB
			SET 
				CMPY_SEQ = #{cmpySeq},
		<![CDATA[
				CMPY_NAME = #{cmpyName},
				CMPY_PHONE = replace(#{cmpyPhone},'-',''),
				CMPY_FAX = replace(#{cmpyFax},'-',''),
				MNG_NAME = #{mngName},
				PRDCT_NAME = (select ifnull(nullif(group_concat(DISTINCT  product), ''), #{prdctName}) 
								from TEST_ITEM_TB where quo_ym = substring(#{quoId},2,4) and quo_seq = substring(#{quoId},8,4) and state != 'D'),
				MODEL_NAME = (select ifnull(nullif(group_concat(DISTINCT  model), ''), #{modelName})
								from TEST_ITEM_TB where quo_ym = substring(#{quoId},2,4) and quo_seq = substring(#{quoId},8,4) and state != 'D'),
				UDT_MEM_ID = #{udtMemId}
		]]>
		WHERE 1=1
		AND JOB_TB.quo_ym = substring(#{quoId},2,4)
		AND JOB_TB.quo_seq = substring(#{quoId},8,4)
	</update>

	<update id="updateJobQuo" parameterType="quoReq" >
			UPDATE JOB_TB
			SET 
				quo_ym = substring(#{quoId},2,4),
				JOB_TB.quo_seq = substring(#{quoId},8,4),
				UDT_MEM_ID = #{udtMemId},
				UDT_DT = now()
		WHERE 1=1
		and JOB_TB.sbk_ym = substring(#{sbkId},3,2)
		and JOB_TB.sbk_seq = substring(#{sbkId},7,4)
	</update>
		
	<resultMap type="quoRes" id="quoMap">
		<id column="quo_ym" property="quoYm"/>
		<id column="quo_seq" property="quoSeq"/>
		<result column="quoId" property="quoId"/>
		<result column="sbkId" property="sbkId"/>
		<result column="cmpyCode" property="cmpyCode"/>
		<result column="cmpyType" property="cmpyType"/>
		<result column="cmpy_seq" property="cmpySeq"/>
		<result column="est_cmp_dt" property="estCmpDt"/>
		<result column="version" property="version"/>
		<result column="cmpyName" property="cmpyName"/>
		<result column="issue_dt" property="issueDt"/>
		<result column="mngName" property="mngName"/>
		<result column="cmpyPhone" property="cmpyPhone"/>
		<result column="cmpyFax" property="cmpyFax"/>
		<result column="mem_name" property="memName"/>
		<result column="prdct_name" property="prdctName"/>
		<result column="model_name" property="modelName"/>
		<result column="trgt_crtfc" property="trgtCrtfc"/>
		<result column="prd_inf" property="prdInf"/>
		<result column="power_suply_yn" property="powerSuplyYn"/>
		<result column="wght_yn" property="wghtYn"/>
		<result column="memo" property="memo"/>
		<result column="vat_yn" property="vatYn"/>
		<result column="need_week" property="needWeek"/>
		<result column="spcl_cndtn" property="spclCndtn"/>
		<result column="cost_total" property="CostTotal"/>
		<result column="total_vat" property="TotalVat"/>
		<result column="sgn_url" property="sgnUrl"/>
		<result column="memPos" property="memPos"/>
		<result column="dir" property="dir"/>
		<result column="cp" property="cp"/>
		<result column="email" property="email"/>
		<result column="billState" property="billState"/>
		<result column="billDtStr" property="billDtStr"/>
		<result column="payState" property="payState"/>
		<result column="payDtStr" property="payDtStr"/>
		<result column="quo_state_code" property="quoStateCode"/>
		<result column="QUO_MOD_SEQ" property="quoModeSeq"/>
		<result column="quoModState" property="quoModState"/>
		<result column="prmsDtStr" property="prmsDtStr"/>
		<result column="prmsName" property="prmsName"/>
		
		<collection property="items" ofType="testItemDTO">
        	<id column="test_item_seq" property="testItemSeq"/>
        	<result column="crtfc1" property="crtfc1"/>
	        <result column="crtfc2" property="crtfc2"/>
    	    <result column="TEST_TYPE_CODE" property="testTypeCode"/>
       	 	<result column="TEST_STNDR_SEQ" property="testStndrSeq"/>
       	 	<result column="testCate" property="testCate"/>
       	 	<result column="TEST_TYPE" property="testType"/>
       	 	<result column="product" property="product"/>
       	 	<result column="model" property="model"/>
       	 	<result column="itemMemo" property="memo"/>
       	 	<result column="fee" property="fee"/>
       	 	<result column="LCNS_TAX" property="lcnsTax"/>
       	 	<result column="TEST_FEE" property="testFee"/>
       	 	<result column="chrgs" property="chrgs"/>
       	 	<result column="ADVNC_PYMNT" property="advncPymnt"/>
       	 	<result column="SPCL_DSCNT" property="spclDscnt"/>
       	 	<result column="CNSLT_FEE" property="cnsltFee"/>
       	 	<result column="OTSRC_FEE" property="otsrcFee"/>
       	 	<result column="NET_SALES" property="netSales"/>
        </collection>
	</resultMap>
	<select id="selectDetail" parameterType="String" resultMap="quoMap">
		select
			QUO_TB.quo_ym
			,QUO_TB.quo_seq
			,FN_GET_SEQSTRING('Q',QUO_TB.QUO_YM,QUO_TB.type,QUO_TB.QUO_SEQ) quoId 
            ,IFNULL(FN_GET_SEQSTRING('SB',JOB_TB.sbk_ym,'G',JOB_TB.sbk_seq), '') sbkId
            
            /* 업체정보 */
            ,ifnull((select cmpy_code from CMPY_TB where cmpy_seq = JOB_TB.CMPY_SEQ),'') cmpy_code
			,fn_cust_type(JOB_TB.CMPY_SEQ) cmpyType
			,JOB_TB.CMPY_SEQ
            ,ifnull(JOB_TB.CMPY_NAME, '') cmpyName
            ,ifnull(JOB_TB.MNG_NAME, '') mngName
			,FN_GET_PHONE_FORMAT(ifnull(JOB_TB.CMPY_PHONE, '')) cmpyPhone
			,FN_GET_PHONE_FORMAT(ifnull(JOB_TB.CMPY_FAX, '')) cmpyFax
			,MEMBER_TB.MEM_NAME
            
			,date_format(EST_CMP_DT, '%Y-%m-%d') est_cmp_dt
			,version
			,date_format(QUO_TB.ISSUE_DT, '%Y-%m-%d') issue_dt 
			,JOB_TB.PRDCT_NAME
			,JOB_TB.MODEL_NAME
			,QUO_TB.TRGT_CRTFC
			,QUO_TB.PRD_INF
			,QUO_TB.POWER_SUPLY_YN
			,QUO_TB.WGHT_YN
			,QUO_TB.memo
			,QUO_TB.VAT_YN
			,QUO_TB.need_week
			,QUO_TB.SPCL_CNDTN
			,QUO_TB.COST_TOTAL
			,QUO_TB.TOTAL_VAT
			<![CDATA[,concat('/file/getImage.do?atchFileId=',QUO_TB.SGN_URL,'&fileSn=0') SGN_URL]]>
			,concat(MEMBER_TB.mem_name, ' ' ,(select ifnull(name, '') from POS_TB where POS_TB.POS_SEQ = MEMBER_TB.POS_SEQ LIMIT 1)) memPos
			,ifnull(FN_GET_PHONE_FORMAT(MEMBER_TB.tel), '') dir
			,ifnull(FN_GET_PHONE_FORMAT(MEMBER_TB.phone), '') cp
			,concat(MEMBER_TB.id,'@standardbank.co.kr') email
			
			, IFNULL(fn_code_name(BILL_STATUS_TB.STATE_CODE, 'MB'),'미발행') billState
            , IFNULL(date_format(BILL_STATUS_TB.ins_dt, '%Y-%m-%d'),'') billDtStr
			, IFNULL(fn_code_name(PAY_STATUS_TB.STATE_CODE, 'MP'), '미납') payState
            , IFNULL(date_format(PAY_STATUS_TB.ins_dt, '%Y-%m-%d'),'') payDtStr
			, IFNULL(quo_state_code, '0') quo_state_code
			, QUO_MOD_TB.QUO_MOD_SEQ
			, IFNULL(fn_code_name(QUO_MOD_TB.STATE_CODE, 'MM'), '') quoModState
            , IFNULL(date_format(QUO_MOD_TB.PRMS_DT, '%Y-%m-%d'),'') prmsDtStr
            , IFNULL(FN_MEM_NAME(QUO_MOD_TB.PRMS_ID),'') prmsName
            
			,QUO_TB.UDT_DT 
			,QUO_TB.UDT_MEM_ID
			
			/* 시험항목 및 비용 */
			,TEST_ITEM_TB.test_item_seq
			,B.test_cate_seq crtfc1
			,A.test_cate_seq crtfc2
			,TEST_STNDR_TB.TEST_TYPE_CODE
			,TEST_STNDR_TB.TEST_STNDR_SEQ
			,concat(B.name,'-',A.name) testCate
			,fn_code_name(TEST_STNDR_TB.TEST_TYPE_CODE,'TT') TEST_TYPE
			,TEST_ITEM_TB.product
			,TEST_ITEM_TB.model
			,TEST_ITEM_TB.memo itemMemo
			,TEST_ITEM_TB.FEE
			,TEST_ITEM_TB.LCNS_TAX
			,TEST_ITEM_TB.TEST_FEE
			,TEST_ITEM_TB.CHRGS
			,TEST_ITEM_TB.ADVNC_PYMNT
			,TEST_ITEM_TB.SPCL_DSCNT
			,TEST_ITEM_TB.CNSLT_FEE
			,TEST_ITEM_TB.OTSRC_FEE
			,TEST_ITEM_TB.NET_SALES
		from QUO_TB
			
		    inner join JOB_TB
		    on QUO_TB.quo_ym = JOB_TB.quo_ym
		    and QUO_TB.quo_seq = JOB_TB.quo_seq
		    
		    inner join MEMBER_TB
		    on QUO_TB.INS_MEM_ID = MEMBER_TB.ID
		    
		    left join TEST_ITEM_TB
		    on QUO_TB.quo_ym = TEST_ITEM_TB.quo_ym
		    and QUO_TB.quo_seq = TEST_ITEM_TB.quo_seq
		    and TEST_ITEM_TB.STATE != 'D'
		    
		    left join TEST_STNDR_TB
		    on TEST_ITEM_TB.TEST_STNDR_SEQ = TEST_STNDR_TB.TEST_STNDR_SEQ
		    
		    left join TEST_CATE_TB A
		    on TEST_STNDR_TB.CRTF_TYPE_SEQ = A.test_cate_seq
		    
			left join TEST_CATE_TB B
		    on A.TOP_DEPTH_SEQ = B.test_cate_seq

			left join SLS_TB
			ON SLS_TB.QUO_YM = JOB_TB.QUO_YM
		    AND SLS_TB.quo_seq = JOB_TB.QUO_SEQ
		    
            left join PAY_STATUS_TB
            on PAY_STATUS_TB.PAY_STATUS_SEQ = (
								select PAY_STATUS_SEQ
                                from PAY_STATUS_TB sub
                                where sub.sls_ym = SLS_TB.sls_ym
                                and sub.sls_seq = SLS_TB.sls_seq
                                order by PAY_STATUS_SEQ desc
                                limit 1
            )
            
            left join BILL_STATUS_TB
            on BILL_STATUS_TB.BILL_STATUS_SEQ = (
								select BILL_STATUS_SEQ
                                from BILL_STATUS_TB sub
                                where sub.sls_ym = SLS_TB.sls_ym
                                and sub.sls_seq = SLS_TB.sls_seq
                                order by BILL_STATUS_SEQ desc
                                limit 1
            )
            
            left join QUO_MOD_TB
            on QUO_MOD_TB.QUO_MOD_SEQ = (
								select QUO_MOD_SEQ
                                from QUO_MOD_TB sub
                                where sub.quo_ym = QUO_TB.quo_ym
                                and sub.quo_seq = QUO_TB.quo_seq
                                order by QUO_MOD_SEQ desc
                                limit 1
            )
            
        where 1=1
        <if test="quoId != null and quoId != ''">
		and QUO_TB.quo_ym = substring(#{quoId},2,4)
		and QUO_TB.quo_seq = substring(#{quoId},8,4)
		</if>
		<if test="sbkId != null and sbkId != ''">
	    and JOB_TB.sbk_ym = substring(#{sbkId},3,2)
		and JOB_TB.sbk_seq = substring(#{sbkId},7,4)
		</if>
	</select>
	
	<select id="selectStatusList" parameterType="String" resultType="egovMap">
		select
			date_format(QUO_MOD_TB.ins_dt, '%Y-%m-%d') instDtStr,
		    A.MEM_NAME insName,
		    memo,
			IFNULL(B.mem_name, '') PrmsName,
            IFNULL(date_format(QUO_MOD_TB.PRMS_DT, '%Y-%m-%d'), '') PRMS_DT,
		    fn_code_name(QUO_MOD_TB.state_code,'MM') stateType,
			IFNULL(date_format(QUO_MOD_TB.UDT_DT, '%Y-%m-%d'), '') UDT_DT

		from QUO_MOD_TB
		
			inner join MEMBER_TB A
			on QUO_MOD_TB.ins_mem_id = A.id
		
			left join MEMBER_TB B
			on QUO_MOD_TB.PRMS_ID = B.id
            
		where 1=1
		and QUO_MOD_TB.quo_ym = substring(#{quoId},2,4)
		and QUO_MOD_TB.quo_seq = substring(#{quoId},8,4)
		order by QUO_MOD_SEQ desc
	</select>
	
	<update id="updateQuoState" parameterType="quoModReq">
		UPDATE QUO_TB
		SET
			QUO_STATE_CODE = #{stateCode},
			UDT_MEM_ID = #{udtMemId},
			UDT_DT = current_timestamp(),	
			STATE = 'U'
		WHERE QUO_TB.quo_ym = substring(#{quoId},2,4)
		AND QUO_TB.quo_seq = substring(#{quoId},8,4)
	</update>
	
	<insert id="insertState" parameterType="quoModReq" >
		INSERT INTO QUO_MOD_TB
		(
			QUO_YM,
			QUO_SEQ,
			MEMO,
			STATE_CODE,
			INS_MEM_ID,
			UDT_MEM_ID
		)
		VALUES
		(
			substring(#{quoId},2,4),
			substring(#{quoId},8,4),
			#{memo},
			'2',
			#{insMemId},
			#{udtMemId}
		);

	</insert>

	<update id="updateState" parameterType="quoModReq" >
		UPDATE QUO_MOD_TB
		SET
			STATE_CODE = #{stateCode},
			<if test='stateCode == "3"'>
			prms_dt = current_timestamp(),
			prms_id = #{udtMemId},
			</if>
			UDT_MEM_ID = #{udtMemId},
			UDT_DT = current_timestamp()
		WHERE QUO_MOD_TB.quo_ym = substring(#{quoId},2,4)
		AND QUO_MOD_TB.quo_seq = substring(#{quoId},8,4)
		<if test='stateCode == "3"'>
		AND STATE_CODE = '2'
		</if>
		<if test='stateCode == "4"'>
		AND STATE_CODE = '3'
		</if>

	</update>
		
</mapper>